import { type AnalyticsTracker } from './analytics/analytics-tracker';
import { Config } from './configuration';
import { BroadcastClientError } from './errors';
import { ConnectionState } from './broadcast-client-events';
import { type MediaStreamManager, type CanvasDimensions, type VideoComposition } from './media-stream-manager';
import { type IEventEmitter, type Callback } from './emitter.types';
import { type PeerClient } from './peer-client';
import { type PeerStatsTracker } from './analytics/peer-stats-tracker';
/**
 * Stub for Participant class
 */
declare class Participant {
}
/**
 * A class implementing the Stages SDK .
 */
export declare class AmazonIVSBroadcastStageClient {
    emitter: IEventEmitter;
    config: Config;
    private mediaStreamManager;
    private peerClient;
    private peerStatsTracker;
    private analyticsTracker;
    private isValid;
    /**
     * Creates an instance of the AmazonIVSBroadcastStageClient.
     *
     * @param emitter - [[IEventEmitter]] A typed event emitter with events defined by [[BroadcastClientEventPayloads]].
     * @param config - [[Config]]
     * @param mediaStreamManager - [[MediaStreamManager]]
     * @param peerClient - [[PeerClient]]
     * @param peerStatsTracker - [[PeerStatsTracker]]
     * @param analyticsTracker - [[AnalyticsTracker]]
     */
    constructor(emitter: IEventEmitter, config: Config, mediaStreamManager: MediaStreamManager, peerClient: PeerClient, peerStatsTracker: PeerStatsTracker, analyticsTracker: AnalyticsTracker);
    /**
     * Explicitly stop and/or free internal components that would otherwise leak.
     */
    delete(): void;
    /**
     * Joins an IVS Stage by publishing a stream and subscribing to all a Stage's participants
     *
     * @throws Throws a [[BroadcastClientError]] if unable to stream.
     * @param token - IVS-generated token for the IVS Stage.
     */
    join(token: string): Promise<BroadcastClientError | void>;
    /**
     * Leaves the current Stage
     */
    leave(): void;
    /**
     * Publish to an IVS Stage
     *
     * @throws Throws a [[BroadcastClientError]] if unable to stream.
     * @param token - IVS-generated token for the IVS Stage.
     */
    publish(token: string): Promise<BroadcastClientError | void>;
    /**
     * Stop publishing to the current Stage
     */
    unpublish(token: string): void;
    /**
     * Subscribe to a Participant in the Stage
     *
     * @throws Throws a [[BroadcastClientError]] if unable to subscribe
     * @param participant - Participant
     */
    subscribe(participant: Participant): Promise<BroadcastClientError | void>;
    /**
     * Stop subscribing to given participant
     *
     * @param participant - Participant
     */
    unsubscribe(participant: Participant): void;
    /**
     * TODO: listAllParticipants/getParticipants/etc?
     */
    /**
     * Gets the dimensions of the canvas on which the stream is drawn.
     */
    getCanvasDimensions(): CanvasDimensions;
    /**
     * Adds the specified video input to the broadcast stream.
     *
     * @param device - Video input to add to the stream.
     * @param name - Unique string you assign to the video-input device.
     * @param position - The desired position of the video in the stream.
     */
    addVideoInputDevice(device: MediaStream, name: string, position: VideoComposition): Promise<void>;
    /**
     * Adds the specified image to the broadcast stream.
     *
     * @param image - Image to add to the stream. Must be of type HTMLImageElement, HTMLVideoElement,  HTMLCanvasElement or ImageBitmap.
     * @param name - Unique string you assign to the image.
     * @param position - The desired position of the image in the stream.
     */
    addImageSource(image: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | ImageBitmap, name: string, position: VideoComposition): Promise<void>;
    /**
     * Adds the specified audio input to the broadcast stream.
     *
     * @param device - Audio input to add to the stream.
     * @param name - Unique string you assign to the audio-input device.
     */
    addAudioInputDevice(device: MediaStream, name: string): Promise<void>;
    /**
     * Removes the specified video-input device from the stream.
     *
     * @param name - unique name of the device to remove.
     */
    removeVideoInputDevice(name: string): void;
    /**
     * Removes the specified audio-input device from the stream.
     *
     * @param name - Unique name of the device to remove.
     */
    removeAudioInputDevice(name: string): void;
    /**
     * Removes the specified image from the stream.
     *
     * @param name - Unique name of the image to remove.
     */
    removeImage(name: string): void;
    /**
     * Updates the position of the specified video device in the stream.
     *
     * @param name - Unique name of the device to update.
     * @param composition - The new position.
     */
    updateVideoDeviceComposition(name: string, composition: VideoComposition): void;
    /**
     * Exchanges (swaps) the VideoComposition settings of two video devices.
     *
     * @param name1 - Unique name of the video device to swap (one of two).
     * @param name2 - Unique name of the video device to swap (two of two).
     */
    exchangeVideoDevicePositions(name1: string, name2: string): void;
    /**
     * Gets the MediaStream of the specified audio device.
     *
     * @param name - Unique name of the audio device.
     */
    getAudioInputDevice(name: string): ReturnType<MediaStreamManager['getAudioInputDevice']>;
    /**
     * Gets the [[VideoDevice] of the specified video-input device.
     *
     * @param name - Unique name of the video-input device.
     */
    getVideoInputDevice(name: string): ReturnType<MediaStreamManager['getVideoInputDevice']>;
    /**
     * Gets the state of the webRTC connection.
     */
    getConnectionState(): ConnectionState;
    on<Key extends string>(event: Key, callback: Callback): void;
    off<Key extends string>(event: Key, callback: Callback): void;
    /**
     * Returns the Media Stream Manager's Audio Context to allow a user to have more direct control over the audio stream.
     */
    getAudioContext(): AudioContext;
    /**
     * Attach a HTMLCanvasElement to display a preview of the output.
     *
     * @param element - An HTMLCanvasElement on which to draw the composited preview.
     */
    attachPreview(element: HTMLCanvasElement): void;
    /**
     * Detach the HTMLCanvasElement preview element.
     *
     */
    detachPreview(): void;
    /**
     * Disables all video content from the stream.
     */
    disableVideo(): void;
    /**
     * Enables all video content from the stream if previously disabled.
     */
    enableVideo(): void;
    /**
     * Disables all audio content from the stream.
     */
    disableAudio(): void;
    /**
     * Enables all audio content from the stream if previously disabled.
     */
    enableAudio(): void;
}
export {};
