import { Logger } from '../logger';
import { type MediaStreamManager } from '../media-stream-manager';
import { type PeerClient } from '../peer-client';
import { type AnalyticsTracker } from './analytics-tracker';
/**
 * Handles emitting periodic events to Spade with calculated samples containing WebRTC connection stats.
 */
export declare class PeerStatsTracker {
    private analyticsTracker;
    private peerClient;
    private mediaStreamManager;
    private trackPeerConnectionStatsTimerId?;
    private collectSamplesTimerId?;
    private trackSamplesTimerId?;
    private previousBytesSent;
    private startTimestamp;
    private audioLatencySamples;
    private videoLatencySamples;
    private congestionTimeSamples;
    private measuredBitrateSamples;
    private recommendedBitrateSamples;
    private rttSamples;
    private logger;
    /**
     * Instantiates a [[PeerStatsTracker]].
     *
     * @param analyticsTracker - An instance of [[AnalyticsTracker]].
     * @param peerClient - An instance of [[PeerClient]].
     * @param mediaStreamManager - An instance of [[MediaStreamManager]].
     * @param logger - An instance of [[Logger]].
     */
    constructor(analyticsTracker: AnalyticsTracker, peerClient: PeerClient, mediaStreamManager: MediaStreamManager, logger: Logger);
    /**
     * Starts the periodic event intervals that send events every tick.
     */
    start(): void;
    /**
     * Clears the active periodic event intervals.
     */
    stop(): void;
    /**
     * Emits events with WebRTC connection stats for `outbound-rtp` reports.
     *
     * @private
     */
    private trackPeerConnectionStats;
    /**
     * Measures how to update each sample based on PeerClient report types.
     *
     * @private
     */
    private collectSamples;
    /**
     * Emits multiple periodic events before flushing the samples and resetting the event count.
     *
     * @private
     */
    private trackSamples;
    /**
     * Flushes all of the samples from the [[PeerStatsTracker]] and resets the event count.
     *
     * @private
     */
    private initializeSamples;
}
