import { Logger, LogLevels } from './logger/logger.types';
import { STANDARD_LANDSCAPE, STANDARD_PORTRAIT, StreamConfig } from './configuration';
/**
 * The configuration used to initialize the BroadcastClient.
 */
export interface StageClientConfig {
    logLevel?: LogLevels;
    logger?: Partial<Logger>;
}
export interface DefaultStageConfig {
    LOG_LEVEL: typeof LogLevels;
    STANDARD_LANDSCAPE: typeof STANDARD_LANDSCAPE;
    STANDARD_PORTRAIT: typeof STANDARD_PORTRAIT;
}
export declare const defaultStageConfig: DefaultStageConfig;
export declare type ConfigurationInstance = Partial<StageClientConfig> & StageConfig;
/**
 * The Config class is a singleton that holds the configuration for the application
 */
export declare class StageConfig {
    #private;
    LOG_LEVEL: typeof LogLevels;
    STANDARD_LANDSCAPE: StreamConfig;
    STANDARD_PORTRAIT: StreamConfig;
    /**
     * Get the stream config.
     *
     * @returns The streamConfig property is a getter that returns the streamConfig property of the class.
     */
    get streamConfig(): StreamConfig;
    /**
     * Get the log level.
     *
     * @returns The log level.
     */
    get logLevel(): LogLevels | undefined;
    /**
     * Set the log level to the given value.
     *
     * @param newLogLevel - The new log level to set.
     */
    set logLevel(newLogLevel: unknown);
    /**
     * Get the logger property from the config.
     *
     * @returns The logger property is being returned.
     */
    get logger(): Partial<Logger> | undefined;
    /**
     * Set the logger property.
     *
     * @param newLogger - The new logger to set.
     */
    set logger(newLogger: Partial<Logger> | undefined);
}
