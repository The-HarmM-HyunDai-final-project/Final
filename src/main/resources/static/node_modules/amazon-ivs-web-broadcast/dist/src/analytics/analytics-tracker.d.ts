import { AnalyticsEvent } from './events/base-analytics.types';
/**
 * Utility class that exposes methods to track events with Spade.
 */
export declare class AnalyticsTracker {
    private sessionId?;
    private sharedProperties;
    private spadeClient;
    /**
     * Creates the AnalyticsTracker
     *
     * @param spadeUrl - URL to emit Spade events to.
     * @returns {AnalyticsTracker} A singleton instance of [[AnalyticsTracker]]
     */
    constructor(spadeUrl: string);
    /**
     * Creates a new client-side session ID to track behavior.
     */
    start(): void;
    /**
     * Sends tracking data to Spade.
     *
     * @param analyticsEvent - A Spade analytics event
     * @param analyticsEvent.data - a SpadeEvent
     * @param analyticsEvent.data.event - An event of type [[BroadcastSessionEvents]].
     * @param analyticsEvent.data.properties - Object containing arbitrary properties to be tracked.
     * @private
     */
    trackEvent(analyticsEvent: AnalyticsEvent): void;
    /**
     * Sends tracking data to Spade.
     *
     * @param analyticsEvents - A Spade analytics event array
     * @private
     */
    batchEvents(analyticsEvents: AnalyticsEvent[]): void;
    /**
     * Initializes the AnalyticsTracker by setting the initial properties.
     *
     * @param parameters - Configuration object to initialize the AnalyticsTracker.
     * @param parameters.spadeUrl - URL to emit Spade events to.
     * @private
     */
    private init;
    /**
     * Generates a random UUIDv4 string to be used as a GUID.
     *
     * @returns {string} A randomized UUIDv4 string.
     * @private
     */
    private newGuid;
    /**
     * Takes a Browser SemVer string and parses it, returning an object containing the major, minor and patches version numbers.
     *
     * @param str - Browser SemVer string.
     * @private
     */
    private parseSemver;
}
