<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.theharmm.mapper.PostMapper">
   <insert id="postEnroll">
      insert into post values(post_seq.nextval, #{member_email}, sysdate, #{contents}, #{pid0}, #{pid1}, #{pid2}, #{sentiment_percent},#{sentiment_result})
   </insert>
   
   
   <!-- 포스트 리스트 -->
     <select id="postGetList" resultType="com.theharmm.domain.PostVO" >
      select p.post_id as post_id, p.member_email as member_email, 
      s.file_name as file_name, s.upload_path as upload_path, s.uuid as uuid,
      contents, pid0, pid1, pid2
      from post p, social s where p.post_id = s.post_id
      and (s.file_name like '%.jpg' or s.file_name like '%.png')
       <![CDATA[  
       	and rownum <= 12
       ]]>
      order by p.register_date desc
     </select>
   
   <!-- 포스트 총 개수 -->
     <select id="postGetTotal" resultType="int">
        select count(*) from post
     </select> 
     
     <!-- 사용자별 포스트 하나 가져오기 -->
     <select id="postGetOne" resultType="com.theharmm.domain.PostVO">
        select * from post where post_id = #{post_id}
     </select> 
     
     <!-- 긍정리뷰 리스트 조회 -->
     <select id="selectPositivePostList" resultType="com.theharmm.domain.PostVO">
        SELECT T1.*, T2.FILE_NAME, T2.UPLOAD_PATH, T2.UUID
          FROM POST T1, SOCIAL T2
         WHERE T1.POST_ID = T2.POST_ID (+)
           AND ( T1.PID0 = #{pid} OR T1.PID1 = #{pid} OR T1.PID2 = #{pid} )
           AND T1.SENTIMENT_RESULT = 'P'
           AND ( T2.FILE_NAME LIKE '%.jpg' OR T2.FILE_NAME LIKE '%.png' OR T2.POST_ID IS NULL)
     </select>
     
     <!-- 부정리뷰 리스트 조회 -->
     <select id="selectNegativePostList" resultType="com.theharmm.domain.PostVO">
         SELECT T1.POST_ID, T1.MEMBER_EMAIL, T1.REGISTER_DATE, T1.CONTENTS, T1.PID0, T1.PID1, T1.PID2, T1.SENTIMENT_RESULT, (100-T1.SENTIMENT_PERCENT) AS SENTIMENT_PERCENT,
               T2.FILE_NAME, T2.UPLOAD_PATH, T2.UUID
          FROM POST T1, SOCIAL T2
         WHERE T1.POST_ID = T2.POST_ID (+)
           AND ( T1.PID0 = #{pid} OR T1.PID1 = #{pid} OR T1.PID2 = #{pid} )
           AND T1.SENTIMENT_RESULT = 'N'
           AND ( T2.FILE_NAME LIKE '%.jpg' OR T2.FILE_NAME LIKE '%.png' OR T2.POST_ID IS NULL)
     </select>
     
     
     <update id="mergeKeywordList" parameterType="KeywordDTO">

        MERGE INTO KEYWORD
            USING DUAL ON
            (
                KEYWORD = #{keyword}
            AND PID = #{pid}
            AND SENTIMENT_RESULT = #{sentiment_result}
            )
           WHEN MATCHED THEN 
                UPDATE SET
                        COUNT = COUNT + #{count}
            WHEN NOT MATCHED THEN
                INSERT
                (
                   KEYWORD,
                   COUNT,
                   PID,
                   SENTIMENT_RESULT
                )
                VALUES
                (
                    #{keyword},
                    #{count},
                    #{pid},
                    #{sentiment_result}
                )
	</update>
     
     <!-- 사용자별 포스트 리스트 -->
     <select id="postGetByMailList" resultType="com.theharmm.domain.PostVO" parameterType="String">
      select p.post_id as post_id, p.member_email as member_email, 
      s.file_name as file_name, s.upload_path as upload_path, s.uuid as uuid,
      contents, pid0, pid1, pid2
      from post p, social s where p.post_id = s.post_id
      and (s.file_name like '%.jpg' or s.file_name like '%.png')
      and p.member_email = #{member_email}
      order by p.register_date desc
     </select>
     
     <!-- member_id 별로 포스트 총 개수 -->
   <select id="postGetByMailTotal" resultType="int" parameterType="String">
      select count(*) from post where member_email = #{member_email}
   </select>
     
     <!-- 팔로우 삽입 -->
   <insert id="insertFollow" parameterType="String">
      INSERT INTO
      follow
      VALUES(#{follower_id},#{following_id})
   </insert>
   
   <!-- memberemail로 follower가져오기 -->
   <select id="followerList"
      resultType="String" parameterType="String">
      select follower_id from follow 
         where following_id = #{member_email}
   </select>
   
   <!-- memberemail로 following가져오기 -->
   <select id="followingList"
      resultType="String" parameterType="String">
      select following_id from follow 
         where follower_id = #{member_email}
   </select>
   
   <!-- 팔로워 갯수 세기 -->
   <select id="followerTotal" resultType="int" parameterType="String">
      SELECT
      COUNT(follower_id)
      FROM follow
      WHERE following_id = #{member_email}
   </select>
   
   <!-- 팔로잉 갯수 세기 -->
   <select id="followingTotal" resultType="int" parameterType="String">
      SELECT
      COUNT(following_id)
      FROM follow
      WHERE follower_id = #{member_email}
   </select>
   
   <!-- 삭제된 수량 반환 -->
   <delete id="deleteFollow" parameterType="String">
      DELETE FROM follow
      WHERE
      follower_id = #{follower_id} and following_id = #{following_id}
   </delete>
   
   <!-- 팔로잉 중인지 체크-->
   <select id="countFollow" resultType="int" parameterType="String">
      SELECT
      COUNT(*)
      FROM follow
      where follower_id = #{follower_id} and following_id = #{following_id}
   </select>
         
</mapper>
